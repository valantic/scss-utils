@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use '../variables';

///
/// Creates a container query
///
/// @param   {string|number}   [$up]           Either a breakpoint identifier (xxs, xs, ...) or an absolute value (with unit)
/// @param   {string|number}   [$down]         Either a breakpoint identifier (xxs, xs, ...) or an absolute value (with unit)
/// @param   {Array}           [$breakpoints]  A list of all available breakpoints.
///
@mixin container($up: null, $down: null, $breakpoints: variables.$va-breakpoints) {
  $query: '';
  $indexOfUpBreakpoint: list.index(map.keys($breakpoints), $up);
  $indexOfDownBreakpoint: list.index(map.keys($breakpoints), $down);
  $isUpNumber: meta.type-of($up) == number;
  $isDownNumber: meta.type-of($down) == number;
  $upKey: if(
      $down and not($isDownNumber) and $indexOfDownBreakpoint and $indexOfDownBreakpoint < list.length($breakpoints),
      list.nth(map.keys($breakpoints), $indexOfDownBreakpoint + 1),
      null
  );
  $upValue: if($isUpNumber, $up, false) or map.get($breakpoints, $up);
  $downValue: if($isDownNumber, $down, false) or ($upKey and map.get($breakpoints, $upKey));
  $isValidUpValue: if(not($up) or ($up and $upValue), true, false);
  $isValidDownValue: if(not($down) or ($down and $downValue and $downValue > 0), true, false);
  $downIsBiggerThanUp: (not($up) or not($down)) or ($isValidUpValue and $isValidDownValue and $upValue < $downValue);

  @if not($isValidUpValue) {
    @error 'container(): no valid $up value.';
  } @else if not($isValidDownValue) {
    @error 'container(): no valid $down value.';
  } @else if not($downIsBiggerThanUp) {
    @error 'container(): $up is bigger than $down.';
  } @else if $up == null and $down == null {
    @error 'mecontainerdia(): At least one of the parameters MUST be defined ($up, $down).';
  } @else if $upValue == 0 and $down == null {
    @error 'container(): The given selector would not define a meaningful scope and should be removed.';
  } @else {
    @if $up {
      @if $upValue != 0 {
        $query: $query + ' (min-width: #{$upValue})';
      }
    }

    @if $down {
      @if meta.type-of($down) == number {
        $query: $query + ' (max-width: #{$downValue})';
      } @else {
        $query: $query + ' (max-width: #{$downValue - 1px})';
      }
    }

    // stylelint-disable-next-line media-query-no-invalid
    @container #{$query} {
      @content;
    }
  }
}
